 #region OLD CODE
        //private double AssignPixelValue(BinaryReader imageReader)
        //{
        //    if (Header.ByteOrder != 1)
        //        return LoadPixelBandValue(imageReader);
        //    else
        //        return LoadPixelBandValue_BigEndian(imageReader);
        //}

        //private double LoadPixelBandValue(BinaryReader imageReader)
        //{
        //    if (Header.ByteOrder != 0)
        //        return LoadPixelBandValue_BigEndian(imageReader);
        //    else

        //        switch (PixelType)
        //        {
        //            case DataType.uint8:
        //                return Convert.ToDouble(imageReader.ReadByte());
        //            case DataType.int16:
        //                return Convert.ToDouble(imageReader.ReadInt16());
        //            case DataType.int32:
        //                return Convert.ToDouble(imageReader.ReadInt32());
        //            case DataType.single:
        //                return Convert.ToDouble(imageReader.ReadSingle());
        //            case DataType.envidouble:
        //                return Convert.ToDouble(imageReader.ReadDouble());
        //            case DataType.uint32:
        //                return Convert.ToDouble(imageReader.ReadUInt32());
        //            case DataType.int64:
        //                return Convert.ToDouble(imageReader.ReadInt64());
        //            case DataType.uint16:
        //                return Convert.ToDouble(imageReader.ReadUInt16());
        //            default:
        //                return 0;
        //        }

        //}

        ////...................................................
        //private double LoadPixelBandValue_BigEndian(BinaryReader imageReader)
        //{
        //    if (Header.ByteOrder != 1)
        //        return LoadPixelBandValue(imageReader);
        //    else
        //        switch (PixelType)
        //        {
        //            case DataType.uint8:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToSingle(new byte[] { imageReader.ReadByte() }, 0));
        //            case DataType.int16:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToInt16(imageReader.ReadBytes(2), 0));
        //            case DataType.int32:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToInt32(imageReader.ReadBytes(4), 0));
        //            case DataType.single:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToSingle(imageReader.ReadBytes(4), 0));
        //            case DataType.envidouble:
        //                return MiscUtil.Conversion.BigEndianBitConverter.Big.ToDouble(imageReader.ReadBytes(8), 0);
        //            case DataType.uint32:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToUInt32(imageReader.ReadBytes(4), 0));
        //            case DataType.int64:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToInt64(imageReader.ReadBytes(8), 0));
        //            case DataType.uint16:
        //                return Convert.ToDouble(MiscUtil.Conversion.BigEndianBitConverter.Big.ToUInt16(imageReader.ReadBytes(2), 0));
        //            default:
        //                return 0;
        //        }
        //}



        //private bool PrepareImageVector()
        //{
        //    ImageVector = new double[Header.Samples, Header.Lines, Header.Bands];
        //    //............................................................
        //    _maxValues = MaxLoopValues();
        //    return true;
        //}

        //private double[] RangeValuesFor(int colorBandIndex)
        //{
        //    double[] maxValue = new double[2];
        //    Parallel.For(0, ImageVector.GetLength(0), i =>
        //    //for (int i = 0; i < ImageVector.GetLength(0); i++)
        //    {
        //        for (int j = 0; j < ImageVector.GetLength(1); j++)
        //        {
        //            if (maxValue[0] < ImageVector[i, j, colorBandIndex])
        //                maxValue[0] = ImageVector[i, j, colorBandIndex];
        //            //...........................................................
        //            if (maxValue[1] > ImageVector[i, j, colorBandIndex])
        //                maxValue[1] = ImageVector[i, j, colorBandIndex];
        //        }
        //    });
        //    return maxValue;
        //}
        //public double[, ,] LoadImageCube()
        //{
        //    PrepareImageVector();
        //    if (string.IsNullOrEmpty(_PictureFilePath) || Header == null)
        //    {
        //        return null;
        //    }
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        if (Header.Interleave == Interleave.BSQ)
        //        {
        //            for (int b = 0; b < Header.Bands; b++)
        //            {
        //                for (int l = 0; l < Header.Lines; l++)
        //                {
        //                    for (int s = 0; s < Header.Samples; s++)
        //                    {
        //                        ImageVector[s, l, b] = AssignPixelValue(imageReader);
        //                    }

        //                }
        //            }
        //        }
        //        else if (Header.Interleave == Interleave.BIL)
        //        {
        //            for (int l = 0; l < Header.Lines; l++)
        //            {
        //                for (int b = 0; b < Header.Bands; b++)
        //                {
        //                    for (int s = 0; s < Header.Samples; s++)
        //                    {
        //                        ImageVector[s, l, b] = AssignPixelValue(imageReader);
        //                    }

        //                }
        //            }
        //        }
        //        else if (Header.Interleave == Interleave.BIP)
        //        {
        //            for (int l = 0; l < Header.Lines; l++)
        //            {
        //                for (int s = 0; s < Header.Samples; s++)
        //                {
        //                    for (int b = 0; b < Header.Bands; b++)
        //                    {
        //                        ImageVector[s, l, b] = AssignPixelValue(imageReader);
        //                    }

        //                }
        //            }
        //        }
        //    }
        //    return ImageVector;
        //}
        //public double[, ,] LoadImageCube_withSubWindow(ImageSubWindow currentWindowToLoad)
        //{
        //    if (Header.Interleave == Interleave.BSQ)
        //    {
        //        return BSQ_LoadImageCube_withSubWindow(currentWindowToLoad);
        //    }
        //    else if (Header.Interleave == Interleave.BIL)
        //    {
        //        return BIL_LoadImageCube_withSubWindow(currentWindowToLoad);
        //    }
        //    else if (Header.Interleave == Interleave.BIP)
        //    {
        //        return BIP_LoadImageCube_withSubWindow(currentWindowToLoad);
        //    }
        //    else
        //    {
        //        return null;
        //    }

        //}
       
        //private double[, ,] BSQ_LoadImageCube_withSubWindow(ImageSubWindow currentWindowToLoad)
        //{
        //    ImageVector = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, Header.Bands];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        for (int b = 0; b < Header.Bands; b++)
        //        {
        //            long currentBandStartPosition = imageReader.BaseStream.Position;
        //            //Set Seek Position -- CurrentWindowToLoad.yStart * Header.Samples * sizeof(byte)
        //            imageReader.BaseStream.Position += currentWindowToLoad.yStart * Header.Samples * PixelType.Size();
        //            //.................................................................
        //            for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //            {
        //                //Set Seek Position -- CurrentWindowToLoad.xStart * sizeof(byte)
        //                imageReader.BaseStream.Position += currentWindowToLoad.xStart * PixelType.Size();

        //                for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //                {
        //                    ImageVector[s - currentWindowToLoad.xStart, l - currentWindowToLoad.yStart, b] = LoadPixelBandValue(imageReader);
        //                }
        //                //Set Seek Position -- (CurrentWindowToLoad.xEnd - Header.Samples) * sizeof(byte)
        //                if (currentWindowToLoad.xEnd < Header.Samples)
        //                {
        //                    int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                    imageReader.BaseStream.Position += remainderSamples * PixelType.Size();
        //                }
        //            }
        //            //Set Seek Position -- (CurrentWindowToLoad.yEnd - Header.Lines) * Header.Samples * sizeof(byte)
        //            if (currentWindowToLoad.yEnd < Header.Lines)
        //            {
        //                int remainderlines = Header.Lines - currentWindowToLoad.yEnd;
        //                imageReader.BaseStream.Position += remainderlines * Header.Samples * PixelType.Size();
        //            }
        //        }
        //    }
        //    return ImageVector;
        //}
        //private double[, ,] BIL_LoadImageCube_withSubWindow(ImageSubWindow currentWindowToLoad)
        //{
        //    ImageVector = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, Header.Bands];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        //  Set Seek Position -- Skip NON required Lines                
        //        imageReader.BaseStream.Position += currentWindowToLoad.yStart * Header.Bands * Header.Samples * PixelType.Size();
        //        //........................................................
        //        for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //        {
        //            for (int b = 0; b < Header.Bands; b++)
        //            {
        //                //Set Seek Position -- SKIP NON Needed Samples @ Start
        //                imageReader.BaseStream.Position += currentWindowToLoad.xStart * PixelType.Size();
        //                //.................................................................                        
        //                for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //                {
        //                    ImageVector[s - currentWindowToLoad.xStart, l - currentWindowToLoad.yStart, b] = LoadPixelBandValue(imageReader);
        //                }
        //                //Set Seek Position -- SKIP NON Needed Samples @ END
        //                if (currentWindowToLoad.xEnd < Header.Samples)
        //                {
        //                    int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                    imageReader.BaseStream.Position += remainderSamples * PixelType.Size();
        //                }
        //            }
        //            //Set Seek Position -- SKIP NON Needed Lines @ END
        //            if (currentWindowToLoad.yEnd < Header.Lines)
        //            {
        //                int remainderlines = Header.Lines - currentWindowToLoad.yEnd;
        //                imageReader.BaseStream.Position += remainderlines * Header.Samples * PixelType.Size();
        //            }
        //        }
        //    }
        //    return ImageVector;
        //}
        //private double[, ,] BIP_LoadImageCube_withSubWindow(ImageSubWindow currentWindowToLoad)
        //{
        //    double[, ,] ImagePixels = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, Header.Bands];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        // Set Seek Position -- Pixels NOT needed @ Start
        //        imageReader.BaseStream.Position += (currentWindowToLoad.yStart * Header.Samples * Header.Bands * PixelType.Size()); // Skip Not needed LINES to reach the start line                   
        //        //...............................................................................................
        //        for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //        {
        //            if (currentWindowToLoad.xStart != 0)
        //            {
        //                imageReader.BaseStream.Position += (currentWindowToLoad.xStart * Header.Bands * PixelType.Size());// Skip Not needed SAMPLES to reach the start
        //            }
        //            for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //            {
        //                for (int b = 0; b < Header.Bands; b++)
        //                {
        //                    ImagePixels[s - currentWindowToLoad.xStart, l - currentWindowToLoad.yStart, b] = LoadPixelBandValue(imageReader);
        //                }
        //                // Set Seek Position -- (CurrentWindowToLoad.xEnd - Header.Samples) * sizeof(byte)
        //                if (currentWindowToLoad.xEnd < Header.Samples)
        //                {
        //                    int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                    imageReader.BaseStream.Position += remainderSamples * Header.Bands * PixelType.Size();
        //                }
        //            }
        //        }
        //    }
        //    ImageVector = ImagePixels;
        //    return ImageVector;
        //}
        //.......................................................................................
        //public double[, ,] BSQ_LoadImageSingleBand(int bandIndex)
        //{
        //    if (Header.Interleave== Interleave.BSQ)
        //    {
        //        return BSQ_LoadImageSingleBand(null, bandIndex);
        //    }
        //    else if (Header.Interleave== Interleave.BIL)
        //    {
        //        return BIL_LoadImageSingleBand(null, bandIndex);
        //    }
        //    else if (Header.Interleave== Interleave.BIP)
        //    {
        //        return BIP_LoadImageSingleBand(null, bandIndex);
        //    }
        //    return null;
        //}
        //public double[, ,] LoadImageSingleBand(ImageSubWindow currentWindowToLoad, int bandIndex)
        //{
        //    if (Header.Interleave== Interleave.BSQ)
        //    {
        //        return BSQ_LoadImageSingleBand(currentWindowToLoad, bandIndex);
        //    }
        //    else if (Header.Interleave== Interleave.BIL)
        //    {
        //        return BIL_LoadImageSingleBand(currentWindowToLoad, bandIndex);
        //    }
        //    else if (Header.Interleave== Interleave.BIP)
        //    {
        //        return BIP_LoadImageSingleBand(currentWindowToLoad, bandIndex);
        //    }
        //    return null;
        //}
        //private double[, ,] BSQ_LoadImageSingleBand(ImageSubWindow currentWindowToLoad, int bandIndex)
        //{
        //    if (currentWindowToLoad == null)
        //    {
        //        currentWindowToLoad = new ImageSubWindow() { xStart = 0, xEnd = Header.Samples, yStart = 0, yEnd = Header.Lines };
        //    }
        //    //..............................................................
        //    ImageVector = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, 1];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        imageReader.BaseStream.Position += bandIndex * Header.Lines * Header.Samples * PixelType.Size();

        //        imageReader.BaseStream.Position += currentWindowToLoad.yStart * Header.Samples * PixelType.Size();
        //        //................................................................................
        //        for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //        {
        //            imageReader.BaseStream.Position += currentWindowToLoad.xStart * PixelType.Size();
        //            for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //            {
        //                ImageVector[s, l, 0] = LoadPixelBandValue(imageReader);
        //            }
        //            if (currentWindowToLoad.xEnd < Header.Samples)
        //            {
        //                int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                imageReader.BaseStream.Position += remainderSamples * PixelType.Size();

        //            }
        //        }
        //        //.................................................................
        //    }
        //    return ImageVector;
        //}
        ////..........................................................................
        //private double[, ,] BIL_LoadImageSingleBand(ImageSubWindow currentWindowToLoad, int bandIndex)
        //{
        //    if (currentWindowToLoad == null)
        //    {
        //        currentWindowToLoad = new ImageSubWindow() { xStart = 0, xEnd = Header.Samples, yStart = 0, yEnd = Header.Lines };
        //    }
        //    //..............................................................
        //    ImageVector = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, 1];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        imageReader.BaseStream.Position += currentWindowToLoad.yStart * Header.Samples * Header.Bands * PixelType.Size();
        //        //....................................................................................
        //        for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //        {
        //            imageReader.BaseStream.Position += bandIndex * Header.Samples * PixelType.Size();
        //            //.................................................................................
        //            imageReader.BaseStream.Position += currentWindowToLoad.xStart * PixelType.Size();
        //            for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //            {
        //                ImageVector[s, l, 0] = LoadPixelBandValue(imageReader);
        //            }
        //            if (currentWindowToLoad.xEnd < Header.Samples)
        //            {
        //                int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                imageReader.BaseStream.Position += remainderSamples * PixelType.Size();
        //            }
        //            if (bandIndex < (Header.Bands - 1))
        //            {
        //                int remainderBands = Header.Bands - (bandIndex + 1);
        //                imageReader.BaseStream.Position += remainderBands * Header.Samples * PixelType.Size();
        //            }
        //        }
        //        //.................................................................
        //    }
        //    return ImageVector;
        //}
        //private double[, ,] BIP_LoadImageSingleBand(ImageSubWindow currentWindowToLoad, int bandIndex)
        //{
        //    if (currentWindowToLoad == null)
        //    {
        //        currentWindowToLoad = new ImageSubWindow() { xStart = 0, xEnd = Header.Samples, yStart = 0, yEnd = Header.Lines };
        //    }
        //    //..............................................................
        //    ImageVector = new double[currentWindowToLoad.xEnd - currentWindowToLoad.xStart, currentWindowToLoad.yEnd - currentWindowToLoad.yStart, 1];
        //    using (BinaryReader imageReader = new BinaryReader(new FileStream(_PictureFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)))
        //    {
        //        imageReader.BaseStream.Position += currentWindowToLoad.yStart * Header.Samples * Header.Bands * PixelType.Size();
        //        //....................................................................................
        //        for (int l = currentWindowToLoad.yStart; l < Header.Lines && l < currentWindowToLoad.yEnd; l++)
        //        {
        //            //.................................................................................
        //            imageReader.BaseStream.Position += currentWindowToLoad.xStart * Header.Bands * PixelType.Size();
        //            for (int s = currentWindowToLoad.xStart; s < Header.Samples && s < currentWindowToLoad.xEnd; s++)
        //            {
        //                imageReader.BaseStream.Position += bandIndex * PixelType.Size();
        //                ImageVector[s, l, 0] = LoadPixelBandValue(imageReader);
        //                if (bandIndex < (Header.Bands - 1))
        //                {
        //                    int remainderBands = Header.Bands - (bandIndex + 1);
        //                    imageReader.BaseStream.Position += remainderBands * PixelType.Size();
        //                } 
        //            }
        //            if (currentWindowToLoad.xEnd < Header.Samples)
        //            {
        //                int remainderSamples = Header.Samples - currentWindowToLoad.xEnd;
        //                imageReader.BaseStream.Position += remainderSamples * Header.Bands * PixelType.Size();
        //            }
                   
        //        }
        //        //.................................................................
        //    }
        //    return ImageVector;
        //}
        #endregion